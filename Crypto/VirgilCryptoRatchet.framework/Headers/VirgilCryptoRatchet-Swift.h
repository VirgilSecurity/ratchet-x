// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Foundation;
@import ObjectiveC;
@import VSCRatchet;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VirgilCryptoRatchet",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_PROTOCOL_NAMED("CContext")
@protocol VSCRCContext
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
@end


/// Error context.
/// Can be used for sequential operations, i.e. parsers, to accumulate error.
/// In this way operation is successful if all steps are successful, otherwise
/// last occurred error code can be obtained.
SWIFT_CLASS_NAMED("ErrorCtx")
@interface VSCRErrorCtx : NSObject
/// Handle underlying C context.
@property (nonatomic, readonly) vscr_error_ctx_t * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Reset context to the “no error” state.
- (void)reset;
/// Reset context to the “no error” state.
- (BOOL)errorAndReturnError:(NSError * _Nullable * _Nullable)error;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, VSCRMsgType, "MsgType", closed) {
/// Regular message. This message is all the time except case described in prekey message section.
  VSCRMsgTypeRegular = 0,
/// Prekey message. This message is sent to initiate conversation, till first response is received.
  VSCRMsgTypePrekey = 1,
};


SWIFT_CLASS_NAMED("RatchetCommon")
@interface VSCRRatchetCommon : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, VSCRRatchetError, "RatchetError", closed) {
/// Error during protobuf deserialization
  VSCRRatchetErrorProtobufDecodeError = 1,
/// Message version doesn’t match
  VSCRRatchetErrorMessageVersionDoesnTMatch = 2,
/// Bad message
  VSCRRatchetErrorBadMessage = 3,
/// AES error
  VSCRRatchetErrorAesError = 4,
/// RNG failed
  VSCRRatchetErrorRngFailed = 5,
/// curve25519 error
  VSCRRatchetErrorCurve25519Error = 6,
};
static NSString * _Nonnull const VSCRRatchetErrorDomain = @"VirgilCryptoRatchet.RatchetError";


SWIFT_CLASS_NAMED("RatchetMessage")
@interface VSCRRatchetMessage : NSObject
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns message type.
- (enum VSCRMsgType)getType SWIFT_WARN_UNUSED_RESULT;
/// Returns long-term public key, if message is prekey message.
- (NSData * _Nonnull)getLongTermPublicKey SWIFT_WARN_UNUSED_RESULT;
/// Returns one-time public key, if message is prekey message and if one-time key is present, empty result otherwise.
- (NSData * _Nonnull)getOneTimePublicKey SWIFT_WARN_UNUSED_RESULT;
/// Buffer len to serialize this class.
- (NSInteger)serializeLen SWIFT_WARN_UNUSED_RESULT;
/// Serializes instance.
- (NSData * _Nonnull)serialize SWIFT_WARN_UNUSED_RESULT;
/// Deserializes instance.
+ (VSCRRatchetMessage * _Nonnull)deserializeWithInput:(NSData * _Nonnull)input errCtx:(VSCRErrorCtx * _Nonnull)errCtx SWIFT_WARN_UNUSED_RESULT;
@end

@protocol VSCFRandom;

SWIFT_CLASS_NAMED("RatchetSession")
@interface VSCRRatchetSession : NSObject
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setRngWithRng:(id <VSCFRandom> _Nonnull)rng;
- (void)setupDefaults;
- (BOOL)initiateWithSenderIdentityPrivateKey:(NSData * _Nonnull)senderIdentityPrivateKey receiverIdentityPublicKey:(NSData * _Nonnull)receiverIdentityPublicKey receiverLongTermPublicKey:(NSData * _Nonnull)receiverLongTermPublicKey receiverOneTimePublicKey:(NSData * _Nonnull)receiverOneTimePublicKey error:(NSError * _Nullable * _Nullable)error;
- (BOOL)respondWithSenderIdentityPublicKey:(NSData * _Nonnull)senderIdentityPublicKey receiverIdentityPrivateKey:(NSData * _Nonnull)receiverIdentityPrivateKey receiverLongTermPrivateKey:(NSData * _Nonnull)receiverLongTermPrivateKey receiverOneTimePrivateKey:(NSData * _Nonnull)receiverOneTimePrivateKey message:(VSCRRatchetMessage * _Nonnull)message error:(NSError * _Nullable * _Nullable)error;
- (VSCRRatchetMessage * _Nonnull)encryptWithPlainText:(NSData * _Nonnull)plainText errCtx:(VSCRErrorCtx * _Nonnull)errCtx SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)decryptLenWithMessage:(VSCRRatchetMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)decryptWithMessage:(VSCRRatchetMessage * _Nonnull)message error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)serializeLen SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)serialize SWIFT_WARN_UNUSED_RESULT;
+ (VSCRRatchetSession * _Nonnull)deserializeWithInput:(NSData * _Nonnull)input errCtx:(VSCRErrorCtx * _Nonnull)errCtx SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
