// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Foundation;
@import ObjectiveC;
@import VSCFoundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VirgilCryptoFoundation",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_PROTOCOL_NAMED("CContext")
@protocol VSCFCContext
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
@end


SWIFT_PROTOCOL_NAMED("CipherAuthInfo")
@protocol VSCFCipherAuthInfo <VSCFCContext>
/// Defines authentication tag length in bytes.
@property (nonatomic, readonly) NSInteger authTagLen;
@end


/// Provide interface for data encryption.
SWIFT_PROTOCOL_NAMED("AuthDecrypt")
@protocol VSCFAuthDecrypt <VSCFCipherAuthInfo>
/// Decrypt given data.
/// If ‘tag’ is not give, then it will be taken from the ‘enc’.
- (NSData * _Nullable)authDecryptWithData:(NSData * _Nonnull)data authData:(NSData * _Nonnull)authData tag:(NSData * _Nonnull)tag error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Calculate required buffer length to hold the authenticated decrypted data.
- (NSInteger)authDecryptedLenWithDataLen:(NSInteger)dataLen SWIFT_WARN_UNUSED_RESULT;
@end

@class VSCFAuthEncryptAuthEncryptResult;

/// Provide interface for authenticated data encryption.
SWIFT_PROTOCOL_NAMED("AuthEncrypt")
@protocol VSCFAuthEncrypt <VSCFCipherAuthInfo>
/// Encrypt given data.
/// If ‘tag’ is not give, then it will written to the ‘enc’.
- (VSCFAuthEncryptAuthEncryptResult * _Nullable)authEncryptWithData:(NSData * _Nonnull)data authData:(NSData * _Nonnull)authData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Calculate required buffer length to hold the authenticated encrypted data.
- (NSInteger)authEncryptedLenWithDataLen:(NSInteger)dataLen SWIFT_WARN_UNUSED_RESULT;
@end



/// Provide interface for data encryption.
SWIFT_PROTOCOL_NAMED("Encrypt")
@protocol VSCFEncrypt <VSCFCContext>
/// Encrypt given data.
- (NSData * _Nullable)encryptWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Calculate required buffer length to hold the encrypted data.
- (NSInteger)encryptedLenWithDataLen:(NSInteger)dataLen SWIFT_WARN_UNUSED_RESULT;
@end


/// Provide interface for data encryption.
SWIFT_PROTOCOL_NAMED("Decrypt")
@protocol VSCFDecrypt <VSCFCContext>
/// Decrypt given data.
- (NSData * _Nullable)decryptWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Calculate required buffer length to hold the decrypted data.
- (NSInteger)decryptedLenWithDataLen:(NSInteger)dataLen SWIFT_WARN_UNUSED_RESULT;
@end


/// Provides compile time knownledge about algorithm.
SWIFT_PROTOCOL_NAMED("CipherInfo")
@protocol VSCFCipherInfo <VSCFCContext>
/// Cipher nfonce length or IV length in bytes, or 0 if nonce is not required.
@property (nonatomic, readonly) NSInteger nonceLen;
/// Cipher key length in bytes.
@property (nonatomic, readonly) NSInteger keyLen;
/// Cipher key length in bits.
@property (nonatomic, readonly) NSInteger keyBitlen;
/// Cipher block length in bytes.
@property (nonatomic, readonly) NSInteger blockLen;
@end


/// Provide interface for symmetric ciphers.
SWIFT_PROTOCOL_NAMED("Cipher")
@protocol VSCFCipher <VSCFCipherInfo, VSCFDecrypt, VSCFEncrypt>
/// Setup IV or nonce.
- (void)setNonceWithNonce:(NSData * _Nonnull)nonce;
/// Set cipher encryption / decryption key.
- (void)setKeyWithKey:(NSData * _Nonnull)key;
@end






/// Mix-in interface that provides specific functionality to authenticated
/// encryption and decryption.
SWIFT_PROTOCOL_NAMED("CipherAuth")
@protocol VSCFCipherAuth <VSCFAuthDecrypt, VSCFAuthEncrypt>
@end


/// Implementation of the symmetric cipher AES-256 bit in a GCM mode.
/// Note, this implementation contains dynamic memory allocations,
/// this should be improved in the future releases.
SWIFT_CLASS_NAMED("Aes256Gcm")
@interface VSCFAes256Gcm : NSObject <VSCFCipher, VSCFCipherAuth>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Cipher nfonce length or IV length in bytes, or 0 if nonce is not required.
@property (nonatomic, readonly) NSInteger nonceLen;
/// Cipher key length in bytes.
@property (nonatomic, readonly) NSInteger keyLen;
/// Cipher key length in bits.
@property (nonatomic, readonly) NSInteger keyBitlen;
/// Cipher block length in bytes.
@property (nonatomic, readonly) NSInteger blockLen;
/// Defines authentication tag length in bytes.
@property (nonatomic, readonly) NSInteger authTagLen;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Encrypt given data.
- (NSData * _Nullable)encryptWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Calculate required buffer length to hold the encrypted data.
- (NSInteger)encryptedLenWithDataLen:(NSInteger)dataLen SWIFT_WARN_UNUSED_RESULT;
/// Decrypt given data.
- (NSData * _Nullable)decryptWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Calculate required buffer length to hold the decrypted data.
- (NSInteger)decryptedLenWithDataLen:(NSInteger)dataLen SWIFT_WARN_UNUSED_RESULT;
/// Setup IV or nonce.
- (void)setNonceWithNonce:(NSData * _Nonnull)nonce;
/// Set cipher encryption / decryption key.
- (void)setKeyWithKey:(NSData * _Nonnull)key;
/// Encrypt given data.
/// If ‘tag’ is not give, then it will written to the ‘enc’.
- (VSCFAuthEncryptAuthEncryptResult * _Nullable)authEncryptWithData:(NSData * _Nonnull)data authData:(NSData * _Nonnull)authData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Calculate required buffer length to hold the authenticated encrypted data.
- (NSInteger)authEncryptedLenWithDataLen:(NSInteger)dataLen SWIFT_WARN_UNUSED_RESULT;
/// Decrypt given data.
/// If ‘tag’ is not give, then it will be taken from the ‘enc’.
- (NSData * _Nullable)authDecryptWithData:(NSData * _Nonnull)data authData:(NSData * _Nonnull)authData tag:(NSData * _Nonnull)tag error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Calculate required buffer length to hold the authenticated decrypted data.
- (NSInteger)authDecryptedLenWithDataLen:(NSInteger)dataLen SWIFT_WARN_UNUSED_RESULT;
@end


/// Provides interface to the ASN.1 reader.
/// Note, that all “read” methods move reading position forward.
/// Note, that all “get” do not change reading position.
SWIFT_PROTOCOL_NAMED("Asn1Reader")
@protocol VSCFAsn1Reader <VSCFCContext>
/// Reset all internal states and prepare to new ASN.1 reading operations.
- (void)resetWithData:(NSData * _Nonnull)data;
/// Return last error.
- (BOOL)errorAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Get tag of the current ASN.1 element.
- (int32_t)getTag SWIFT_WARN_UNUSED_RESULT;
/// Get length of the current ASN.1 element.
- (NSInteger)getLen SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: TAG.
/// Return element length.
- (NSInteger)readTagWithTag:(int32_t)tag SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (int32_t)readInt SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (int8_t)readInt8 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (int16_t)readInt16 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (int32_t)readInt32 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (int64_t)readInt64 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (uint32_t)readUint SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (uint8_t)readUint8 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (uint16_t)readUint16 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (uint32_t)readUint32 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (uint64_t)readUint64 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: BOOLEAN.
- (BOOL)readBool SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: NULL.
- (void)readNull;
/// Read ASN.1 type: OCTET STRING.
- (NSData * _Nonnull)readOctetStr SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: BIT STRING.
- (NSData * _Nonnull)readBitstringAsOctetStr SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: UTF8String.
- (NSData * _Nonnull)readUtf8Str SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: OID.
- (NSData * _Nonnull)readOid SWIFT_WARN_UNUSED_RESULT;
/// Read raw data of given length.
- (NSData * _Nonnull)readDataWithLen:(NSInteger)len SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: CONSTRUCTED | SEQUENCE.
/// Return element length.
- (NSInteger)readSequence SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: CONSTRUCTED | SET.
/// Return element length.
- (NSInteger)readSet SWIFT_WARN_UNUSED_RESULT;
@end

/// ASN.1 constants.
typedef SWIFT_ENUM_NAMED(NSInteger, VSCFAsn1Tag, "Asn1Tag", closed) {
  VSCFAsn1TagBoolean = 0x01,
  VSCFAsn1TagInteger = 0x02,
  VSCFAsn1TagBitString = 0x03,
  VSCFAsn1TagOctetString = 0x04,
  VSCFAsn1TagNull = 0x05,
  VSCFAsn1TagOid = 0x06,
  VSCFAsn1TagUtf8String = 0x0C,
  VSCFAsn1TagSequence = 0x10,
  VSCFAsn1TagSet = 0x11,
  VSCFAsn1TagPrintableString = 0x13,
  VSCFAsn1TagT61String = 0x14,
  VSCFAsn1TagIa5String = 0x16,
  VSCFAsn1TagUtcTime = 0x17,
  VSCFAsn1TagGeneralizedTime = 0x18,
  VSCFAsn1TagUniversalString = 0x1C,
  VSCFAsn1TagBmpString = 0x1E,
  VSCFAsn1TagPrimitive = 0x00,
  VSCFAsn1TagConstructed = 0x20,
  VSCFAsn1TagContextSpecific = 0x80,
};


/// Provides interface to the ASN.1 writer.
/// Note, elements are written starting from the buffer ending.
/// Note, that all “write” methods move writing position backward.
SWIFT_PROTOCOL_NAMED("Asn1Writer")
@protocol VSCFAsn1Writer <VSCFCContext>
/// Reset all internal states and prepare to new ASN.1 writing operations.
- (void)resetWithOut:(uint8_t * _Nonnull)out outLen:(NSInteger)outLen;
/// Move written data to the buffer beginning and forbid further operations.
/// Returns written size in bytes.
- (NSInteger)finish SWIFT_WARN_UNUSED_RESULT;
/// Return last error.
- (BOOL)errorAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Move writing position backward for the given length.
/// Return current writing position.
- (uint8_t * _Nonnull)reserveWithLen:(NSInteger)len SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 tag.
/// Return count of written bytes.
- (NSInteger)writeTagWithTag:(int32_t)tag SWIFT_WARN_UNUSED_RESULT;
/// Write length of the following data.
/// Return count of written bytes.
- (NSInteger)writeLenWithLen:(NSInteger)len SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeIntWithValue:(int32_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeInt8WithValue:(int8_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeInt16WithValue:(int16_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeInt32WithValue:(int32_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeInt64WithValue:(int64_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeUintWithValue:(uint32_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeUint8WithValue:(uint8_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeUint16WithValue:(uint16_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeUint32WithValue:(uint32_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeUint64WithValue:(uint64_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: BOOLEAN.
/// Return count of written bytes.
- (NSInteger)writeBoolWithValue:(BOOL)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: NULL.
- (NSInteger)writeNull SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: OCTET STRING.
/// Return count of written bytes.
- (NSInteger)writeOctetStrWithValue:(NSData * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: BIT STRING with all zero unused bits.
/// Return count of written bytes.
- (NSInteger)writeOctetStrAsBitstringWithValue:(NSData * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Write raw data directly to the ASN.1 structure.
/// Return count of written bytes.
/// Note, use this method carefully.
- (NSInteger)writeDataWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: UTF8String.
/// Return count of written bytes.
- (NSInteger)writeUtf8StrWithValue:(NSData * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: OID.
/// Return count of written bytes.
- (NSInteger)writeOidWithValue:(NSData * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Mark previously written data of given length as ASN.1 type: SQUENCE.
/// Return count of written bytes.
- (NSInteger)writeSequenceWithLen:(NSInteger)len SWIFT_WARN_UNUSED_RESULT;
/// Mark previously written data of given length as ASN.1 type: SET.
/// Return count of written bytes.
- (NSInteger)writeSetWithLen:(NSInteger)len SWIFT_WARN_UNUSED_RESULT;
@end


/// This is MbedTLS implementation of ASN.1 reader.
SWIFT_CLASS_NAMED("Asn1rd")
@interface VSCFAsn1rd : NSObject <VSCFAsn1Reader>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Reset all internal states and prepare to new ASN.1 reading operations.
- (void)resetWithData:(NSData * _Nonnull)data;
/// Return last error.
- (BOOL)errorAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Get tag of the current ASN.1 element.
- (int32_t)getTag SWIFT_WARN_UNUSED_RESULT;
/// Get length of the current ASN.1 element.
- (NSInteger)getLen SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: TAG.
/// Return element length.
- (NSInteger)readTagWithTag:(int32_t)tag SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (int32_t)readInt SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (int8_t)readInt8 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (int16_t)readInt16 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (int32_t)readInt32 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (int64_t)readInt64 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (uint32_t)readUint SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (uint8_t)readUint8 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (uint16_t)readUint16 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (uint32_t)readUint32 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: INTEGER.
- (uint64_t)readUint64 SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: BOOLEAN.
- (BOOL)readBool SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: NULL.
- (void)readNull;
/// Read ASN.1 type: OCTET STRING.
- (NSData * _Nonnull)readOctetStr SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: BIT STRING.
- (NSData * _Nonnull)readBitstringAsOctetStr SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: UTF8String.
- (NSData * _Nonnull)readUtf8Str SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: OID.
- (NSData * _Nonnull)readOid SWIFT_WARN_UNUSED_RESULT;
/// Read raw data of given length.
- (NSData * _Nonnull)readDataWithLen:(NSInteger)len SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: CONSTRUCTED | SEQUENCE.
/// Return element length.
- (NSInteger)readSequence SWIFT_WARN_UNUSED_RESULT;
/// Read ASN.1 type: CONSTRUCTED | SET.
/// Return element length.
- (NSInteger)readSet SWIFT_WARN_UNUSED_RESULT;
@end


/// This is MbedTLS implementation of ASN.1 writer.
SWIFT_CLASS_NAMED("Asn1wr")
@interface VSCFAsn1wr : NSObject <VSCFAsn1Writer>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Reset all internal states and prepare to new ASN.1 writing operations.
- (void)resetWithOut:(uint8_t * _Nonnull)out outLen:(NSInteger)outLen;
/// Move written data to the buffer beginning and forbid further operations.
/// Returns written size in bytes.
- (NSInteger)finish SWIFT_WARN_UNUSED_RESULT;
/// Return last error.
- (BOOL)errorAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Move writing position backward for the given length.
/// Return current writing position.
- (uint8_t * _Nonnull)reserveWithLen:(NSInteger)len SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 tag.
/// Return count of written bytes.
- (NSInteger)writeTagWithTag:(int32_t)tag SWIFT_WARN_UNUSED_RESULT;
/// Write length of the following data.
/// Return count of written bytes.
- (NSInteger)writeLenWithLen:(NSInteger)len SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeIntWithValue:(int32_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeInt8WithValue:(int8_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeInt16WithValue:(int16_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeInt32WithValue:(int32_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeInt64WithValue:(int64_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeUintWithValue:(uint32_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeUint8WithValue:(uint8_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeUint16WithValue:(uint16_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeUint32WithValue:(uint32_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: INTEGER.
/// Return count of written bytes.
- (NSInteger)writeUint64WithValue:(uint64_t)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: BOOLEAN.
/// Return count of written bytes.
- (NSInteger)writeBoolWithValue:(BOOL)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: NULL.
- (NSInteger)writeNull SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: OCTET STRING.
/// Return count of written bytes.
- (NSInteger)writeOctetStrWithValue:(NSData * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: BIT STRING with all zero unused bits.
/// Return count of written bytes.
- (NSInteger)writeOctetStrAsBitstringWithValue:(NSData * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Write raw data directly to the ASN.1 structure.
/// Return count of written bytes.
/// Note, use this method carefully.
- (NSInteger)writeDataWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: UTF8String.
/// Return count of written bytes.
- (NSInteger)writeUtf8StrWithValue:(NSData * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Write ASN.1 type: OID.
/// Return count of written bytes.
- (NSInteger)writeOidWithValue:(NSData * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Mark previously written data of given length as ASN.1 type: SQUENCE.
/// Return count of written bytes.
- (NSInteger)writeSequenceWithLen:(NSInteger)len SWIFT_WARN_UNUSED_RESULT;
/// Mark previously written data of given length as ASN.1 type: SET.
/// Return count of written bytes.
- (NSInteger)writeSetWithLen:(NSInteger)len SWIFT_WARN_UNUSED_RESULT;
@end




/// Encapsulate result of method AuthEncrypt.authEncrypt()
SWIFT_CLASS_NAMED("AuthEncryptAuthEncryptResult")
@interface VSCFAuthEncryptAuthEncryptResult : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull out;
@property (nonatomic, readonly, copy) NSData * _Nonnull tag;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Implementation of the Base64 algorithm RFC 1421 and RFC 2045.
SWIFT_CLASS_NAMED("Base64")
@interface VSCFBase64 : NSObject
/// Calculate length in bytes required to hold an encoded base64 string.
+ (NSInteger)encodedLenWithDataLen:(NSInteger)dataLen SWIFT_WARN_UNUSED_RESULT;
/// Encode given data to the base64 format.
/// Note, written buffer is NOT null-terminated.
+ (NSData * _Nonnull)encodeWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Calculate length in bytes required to hold a decoded base64 string.
+ (NSInteger)decodedLenWithStrLen:(NSInteger)strLen SWIFT_WARN_UNUSED_RESULT;
/// Decode given data from the base64 format.
+ (NSData * _Nullable)decodeWithStr:(NSData * _Nonnull)str error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






@protocol VSCFPublicKey;

/// Provide interface to compute shared key for 2 asymmetric keys.
/// Assume that this interface is implemented on the private key.
SWIFT_PROTOCOL_NAMED("ComputeSharedKey")
@protocol VSCFComputeSharedKey <VSCFCContext>
/// Compute shared key for 2 asymmetric keys.
/// Note, shared key can be used only for symmetric cryptography.
- (NSData * _Nullable)computeSharedKeyWithPublicKey:(id <VSCFPublicKey> _Nonnull)publicKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return number of bytes required to hold shared key.
- (NSInteger)sharedKeyLen SWIFT_WARN_UNUSED_RESULT;
@end


/// Provide interface to setup predefined values to the uninitialized
/// class dependencies.
SWIFT_PROTOCOL_NAMED("Defaults")
@protocol VSCFDefaults <VSCFCContext>
/// Setup predefined values to the uninitialized class dependencies.
- (BOOL)setupDefaultsAndReturnError:(NSError * _Nullable * _Nullable)error;
@end


/// Common interface to get random data.
SWIFT_PROTOCOL_NAMED("Random")
@protocol VSCFRandom <VSCFCContext>
/// Generate random bytes.
- (NSData * _Nullable)randomWithDataLen:(NSInteger)dataLen error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Retreive new seed data from the entropy sources.
- (BOOL)reseedAndReturnError:(NSError * _Nullable * _Nullable)error;
@end

@protocol VSCFEntropySource;

/// Implementation of the RNG using deterministic random bit generators
/// based on block ciphers in counter mode (CTR_DRBG from NIST SP800-90A).
/// This class is thread-safe if the build option VSCF_MULTI_THREAD was enabled.
SWIFT_CLASS_NAMED("CtrDrbg")
@interface VSCFCtrDrbg : NSObject <VSCFDefaults, VSCFRandom>
/// The interval before reseed is performed by default.
@property (nonatomic, readonly) NSInteger reseedInterval;
/// The amount of entropy used per seed by default.
@property (nonatomic, readonly) NSInteger entropyLen;
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)setEntropySourceWithEntropySource:(id <VSCFEntropySource> _Nonnull)entropySource error:(NSError * _Nullable * _Nullable)error;
/// Force entropy to be gathered at the beginning of every call to
/// the random() method.
/// Note, use this if your entropy source has sufficient throughput.
- (void)enablePredictionResistance;
/// Sets the reseed interval.
/// Default value is reseed interval.
- (void)setReseedIntervalWithInterval:(NSInteger)interval;
/// Sets the amount of entropy grabbed on each seed or reseed.
/// The default value is entropy len.
- (void)setEntropyLenWithLen:(NSInteger)len;
/// Setup predefined values to the uninitialized class dependencies.
- (BOOL)setupDefaultsAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Generate random bytes.
- (NSData * _Nullable)randomWithDataLen:(NSInteger)dataLen error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Retreive new seed data from the entropy sources.
- (BOOL)reseedAndReturnError:(NSError * _Nullable * _Nullable)error;
@end



enum VSCFKeyAlg : NSInteger;

/// Common information about asymmetric key.
SWIFT_PROTOCOL_NAMED("Key")
@protocol VSCFKey <VSCFCContext>
/// Return implemented asymmetric key algorithm type.
- (enum VSCFKeyAlg)alg SWIFT_WARN_UNUSED_RESULT;
/// Length of the key in bytes.
- (NSInteger)keyLen SWIFT_WARN_UNUSED_RESULT;
/// Length of the key in bits.
- (NSInteger)keyBitlen SWIFT_WARN_UNUSED_RESULT;
@end


/// Contains private part of the key.
SWIFT_PROTOCOL_NAMED("PrivateKey")
@protocol VSCFPrivateKey <VSCFKey>
/// Define whether a private key can be exported or not.
@property (nonatomic, readonly) BOOL canExportPrivateKey;
/// Define whether a private key can be imported or not.
@property (nonatomic, readonly) BOOL canImportPrivateKey;
/// Extract public part of the key.
- (id <VSCFPublicKey> _Nonnull)extractPublicKey SWIFT_WARN_UNUSED_RESULT;
/// Export private key in the binary format.
/// Binary format must be defined in the key specification.
/// For instance, RSA private key must be exported in format defined in
/// RFC 3447 Appendix A.1.2.
- (NSData * _Nullable)exportPrivateKeyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return length in bytes required to hold exported private key.
- (NSInteger)exportedPrivateKeyLen SWIFT_WARN_UNUSED_RESULT;
/// Import private key from the binary format.
/// Binary format must be defined in the key specification.
/// For instance, RSA private key must be imported from the format defined in
/// RFC 3447 Appendix A.1.2.
- (BOOL)importPrivateKeyWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
@end


/// Provide interface for signing data with private key.
SWIFT_PROTOCOL_NAMED("Sign")
@protocol VSCFSign <VSCFCContext>
/// Sign data given private key.
- (NSData * _Nullable)signWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return length in bytes required to hold signature.
- (NSInteger)signatureLen SWIFT_WARN_UNUSED_RESULT;
@end


/// Interface for private or secret key generation.
SWIFT_PROTOCOL_NAMED("GenerateKey")
@protocol VSCFGenerateKey <VSCFCContext>
/// Generate new private or secret key.
/// Note, this operation can be slow.
- (BOOL)generateKeyAndReturnError:(NSError * _Nullable * _Nullable)error;
@end


/// This is implementation of ED25519 private key
SWIFT_CLASS_NAMED("Ed25519PrivateKey")
@interface VSCFEd25519PrivateKey : NSObject <VSCFComputeSharedKey, VSCFGenerateKey, VSCFPrivateKey, VSCFSign>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Define whether a private key can be imported or not.
@property (nonatomic, readonly) BOOL canImportPrivateKey;
/// Define whether a private key can be exported or not.
@property (nonatomic, readonly) BOOL canExportPrivateKey;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setRandomWithRandom:(id <VSCFRandom> _Nonnull)random;
/// Return implemented asymmetric key algorithm type.
- (enum VSCFKeyAlg)alg SWIFT_WARN_UNUSED_RESULT;
/// Length of the key in bytes.
- (NSInteger)keyLen SWIFT_WARN_UNUSED_RESULT;
/// Length of the key in bits.
- (NSInteger)keyBitlen SWIFT_WARN_UNUSED_RESULT;
/// Generate new private or secret key.
/// Note, this operation can be slow.
- (BOOL)generateKeyAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Sign data given private key.
- (NSData * _Nullable)signWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return length in bytes required to hold signature.
- (NSInteger)signatureLen SWIFT_WARN_UNUSED_RESULT;
/// Extract public part of the key.
- (id <VSCFPublicKey> _Nonnull)extractPublicKey SWIFT_WARN_UNUSED_RESULT;
/// Export private key in the binary format.
/// Binary format must be defined in the key specification.
/// For instance, RSA private key must be exported in format defined in
/// RFC 3447 Appendix A.1.2.
- (NSData * _Nullable)exportPrivateKeyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return length in bytes required to hold exported private key.
- (NSInteger)exportedPrivateKeyLen SWIFT_WARN_UNUSED_RESULT;
/// Import private key from the binary format.
/// Binary format must be defined in the key specification.
/// For instance, RSA private key must be imported from the format defined in
/// RFC 3447 Appendix A.1.2.
- (BOOL)importPrivateKeyWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
/// Compute shared key for 2 asymmetric keys.
/// Note, shared key can be used only for symmetric cryptography.
- (NSData * _Nullable)computeSharedKeyWithPublicKey:(id <VSCFPublicKey> _Nonnull)publicKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return number of bytes required to hold shared key.
- (NSInteger)sharedKeyLen SWIFT_WARN_UNUSED_RESULT;
@end


/// Contains public part of the key.
SWIFT_PROTOCOL_NAMED("PublicKey")
@protocol VSCFPublicKey <VSCFKey>
/// Define whether a public key can be exported or not.
@property (nonatomic, readonly) BOOL canExportPublicKey;
/// Defines whether a public key can be imported or not.
@property (nonatomic, readonly) BOOL canImportPublicKey;
/// Export public key in the binary format.
/// Binary format must be defined in the key specification.
/// For instance, RSA public key must be exported in format defined in
/// RFC 3447 Appendix A.1.1.
- (NSData * _Nullable)exportPublicKeyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return length in bytes required to hold exported public key.
- (NSInteger)exportedPublicKeyLen SWIFT_WARN_UNUSED_RESULT;
/// Import public key from the binary format.
/// Binary format must be defined in the key specification.
/// For instance, RSA public key must be imported from the format defined in
/// RFC 3447 Appendix A.1.1.
- (BOOL)importPublicKeyWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
@end


/// Provide interface for verifying data with public key.
SWIFT_PROTOCOL_NAMED("Verify")
@protocol VSCFVerify <VSCFCContext>
/// Verify data with given public key and signature.
- (BOOL)verifyWithData:(NSData * _Nonnull)data signature:(NSData * _Nonnull)signature SWIFT_WARN_UNUSED_RESULT;
@end


/// This is implementation of ED25519 public key
SWIFT_CLASS_NAMED("Ed25519PublicKey")
@interface VSCFEd25519PublicKey : NSObject <VSCFPublicKey, VSCFVerify>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Defines whether a public key can be imported or not.
@property (nonatomic, readonly) BOOL canImportPublicKey;
/// Define whether a public key can be exported or not.
@property (nonatomic, readonly) BOOL canExportPublicKey;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Return implemented asymmetric key algorithm type.
- (enum VSCFKeyAlg)alg SWIFT_WARN_UNUSED_RESULT;
/// Length of the key in bytes.
- (NSInteger)keyLen SWIFT_WARN_UNUSED_RESULT;
/// Length of the key in bits.
- (NSInteger)keyBitlen SWIFT_WARN_UNUSED_RESULT;
/// Verify data with given public key and signature.
- (BOOL)verifyWithData:(NSData * _Nonnull)data signature:(NSData * _Nonnull)signature SWIFT_WARN_UNUSED_RESULT;
/// Export public key in the binary format.
/// Binary format must be defined in the key specification.
/// For instance, RSA public key must be exported in format defined in
/// RFC 3447 Appendix A.1.1.
- (NSData * _Nullable)exportPublicKeyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return length in bytes required to hold exported public key.
- (NSInteger)exportedPublicKeyLen SWIFT_WARN_UNUSED_RESULT;
/// Import public key from the binary format.
/// Binary format must be defined in the key specification.
/// For instance, RSA public key must be imported from the format defined in
/// RFC 3447 Appendix A.1.1.
- (BOOL)importPublicKeyWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
@end



/// Defines generic interface for the entropy source.
SWIFT_PROTOCOL_NAMED("EntropySource")
@protocol VSCFEntropySource <VSCFCContext>
/// Defines that implemented source is strong.
- (BOOL)isStrong SWIFT_WARN_UNUSED_RESULT;
/// Gather entropy of the requested length.
- (NSData * _Nullable)gatherWithLen:(NSInteger)len error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Implementation based on a simple entropy accumulator.
SWIFT_CLASS_NAMED("EntropyAccumulator")
@interface VSCFEntropyAccumulator : NSObject <VSCFDefaults, VSCFEntropySource>
@property (nonatomic, readonly) NSInteger sourcesMax;
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add given entropy source to the accumulator.
/// Threshold defines minimum number of bytes that must be gathered
/// from the source during accumulation.
- (void)addSourceWithSource:(id <VSCFEntropySource> _Nonnull)source threshold:(NSInteger)threshold;
/// Setup predefined values to the uninitialized class dependencies.
- (BOOL)setupDefaultsAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Defines that implemented source is strong.
- (BOOL)isStrong SWIFT_WARN_UNUSED_RESULT;
/// Gather entropy of the requested length.
- (NSData * _Nullable)gatherWithLen:(NSInteger)len error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end



/// Error context.
/// Can be used for sequential operations, i.e. parsers, to accumulate error.
/// In this way operation is successful if all steps are successful, otherwise
/// last occurred error code can be obtained.
SWIFT_CLASS_NAMED("ErrorCtx")
@interface VSCFErrorCtx : NSObject
/// Handle underlying C context.
@property (nonatomic, readonly) vscf_error_ctx_t * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Reset context to the “no error” state.
- (void)reset;
/// Reset context to the “no error” state.
- (BOOL)errorAndReturnError:(NSError * _Nullable * _Nullable)error;
@end


/// Random number generator that is used for test purposes only.
SWIFT_CLASS_NAMED("FakeRandom")
@interface VSCFFakeRandom : NSObject <VSCFEntropySource, VSCFRandom>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Configure random number generator to generate sequence filled with given byte.
- (void)setupSourceByteWithByteSource:(uint8_t)byteSource;
/// Configure random number generator to generate random sequence from given data.
/// Note, that given data is used as circular source.
- (void)setupSourceDataWithDataSource:(NSData * _Nonnull)dataSource;
/// Generate random bytes.
- (NSData * _Nullable)randomWithDataLen:(NSInteger)dataLen error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Retreive new seed data from the entropy sources.
- (BOOL)reseedAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Defines that implemented source is strong.
- (BOOL)isStrong SWIFT_WARN_UNUSED_RESULT;
/// Gather entropy of the requested length.
- (NSData * _Nullable)gatherWithLen:(NSInteger)len error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

/// Defines library error codes.
typedef SWIFT_ENUM_NAMED(NSInteger, VSCFFoundationError, "FoundationError", closed) {
/// This error should not be returned if assertions is enabled.
  VSCFFoundationErrorBadArguments = -1,
/// Can be used to define that not all context prerequisites are satisfied.
/// Note, this error should not be returned if assertions is enabled.
  VSCFFoundationErrorUninitialized = -2,
/// Define that error code from one of third-party module was not handled.
/// Note, this error should not be returned if assertions is enabled.
  VSCFFoundationErrorUnhandledThirdpartyError = -3,
/// Buffer capacity is not enaugh to hold result.
  VSCFFoundationErrorSmallBuffer = -101,
/// Authentication failed during decryption.
  VSCFFoundationErrorAuthFailed = -201,
/// Attempt to read data out of buffer bounds.
  VSCFFoundationErrorOutOfData = -202,
/// ASN.1 encoded data is corrupted.
  VSCFFoundationErrorBadAsn1 = -203,
/// Attempt to read ASN.1 type that is bigger then requested C type.
  VSCFFoundationErrorAsn1LossyTypeNarrowing = -204,
/// ASN.1 representation of PKCS#1 public key is corrupted.
  VSCFFoundationErrorBadPkcs1PublicKey = -205,
/// ASN.1 representation of PKCS#1 private key is corrupted.
  VSCFFoundationErrorBadPkcs1PrivateKey = -206,
/// ASN.1 representation of PKCS#8 public key is corrupted.
  VSCFFoundationErrorBadPkcs8PublicKey = -207,
/// ASN.1 representation of PKCS#8 private key is corrupted.
  VSCFFoundationErrorBadPkcs8PrivateKey = -208,
/// Encrypted data is corrupted.
  VSCFFoundationErrorBadEncryptedData = -209,
/// Underlying random operation returns error.
  VSCFFoundationErrorRandomFailed = -210,
/// Generation of the private or secret key failed.
  VSCFFoundationErrorKeyGenerationFailed = -211,
/// One of the entropy sources failed.
  VSCFFoundationErrorEntropySourceFailed = -212,
/// Requested data to be generated is too big.
  VSCFFoundationErrorRngRequestedDataTooBig = -213,
/// Base64 encoded string contains invalid characters.
  VSCFFoundationErrorBadBase64 = -214,
/// PEM data is corrupted.
  VSCFFoundationErrorBadPem = -215,
/// Exchange key return zero.
  VSCFFoundationErrorSharedKeyExchangeFailed = -216,
};
static NSString * _Nonnull const VSCFFoundationErrorDomain = @"VirgilCryptoFoundation.FoundationError";


enum VSCFHashAlg : NSInteger;

/// Provide details about implemented hash algorithm.
SWIFT_PROTOCOL_NAMED("HashInfo")
@protocol VSCFHashInfo <VSCFCContext>
/// Length of the digest (hashing output) in bytes.
@property (nonatomic, readonly) NSInteger digestLen;
/// Block length of the digest function in bytes.
@property (nonatomic, readonly) NSInteger blockLen;
/// Return implemented hash algorithm type.
- (enum VSCFHashAlg)alg SWIFT_WARN_UNUSED_RESULT;
@end


/// Provides interface to the stateless hashing (messege digest) algorithms.
SWIFT_PROTOCOL_NAMED("Hash")
@protocol VSCFHash <VSCFHashInfo>
/// Calculate hash over given data.
- (NSData * _Nonnull)hashWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, VSCFHashAlg, "HashAlg", closed) {
  VSCFHashAlgNone = 0,
  VSCFHashAlgSha224 = 1,
  VSCFHashAlgSha256 = 2,
  VSCFHashAlgSha384 = 3,
  VSCFHashAlgSha512 = 4,
};



/// Provide interface to calculate hash (message digest) over a stream.
SWIFT_PROTOCOL_NAMED("HashStream")
@protocol VSCFHashStream <VSCFHashInfo>
/// Start a new hashing.
- (void)start;
/// Add given data to the hash.
- (void)updateWithData:(NSData * _Nonnull)data;
/// Accompilsh hashing and return it’s result (a message digest).
- (NSData * _Nonnull)finish SWIFT_WARN_UNUSED_RESULT;
@end


/// Provides interface to the key derivation function (KDF) algorithms
/// that use salt and teration count.
SWIFT_PROTOCOL_NAMED("SaltedKdf")
@protocol VSCFSaltedKdf <VSCFCContext>
/// Derive key of the requested length from the given data, salt and info.
- (NSData * _Nonnull)deriveWithData:(NSData * _Nonnull)data salt:(NSData * _Nonnull)salt info:(NSData * _Nonnull)info keyLen:(NSInteger)keyLen SWIFT_WARN_UNUSED_RESULT;
@end


/// Virgil Security implementation of the HKDF (RFC 6234) algorithm.
SWIFT_CLASS_NAMED("Hkdf")
@interface VSCFHkdf : NSObject <VSCFSaltedKdf>
@property (nonatomic, readonly) NSInteger hashCounterMax;
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setHashWithHash:(id <VSCFHashStream> _Nonnull)hash;
/// Derive key of the requested length from the given data, salt and info.
- (NSData * _Nonnull)deriveWithData:(NSData * _Nonnull)data salt:(NSData * _Nonnull)salt info:(NSData * _Nonnull)info keyLen:(NSInteger)keyLen SWIFT_WARN_UNUSED_RESULT;
@end


/// Provide details about implemented MAC (message authentication code) algorithm.
SWIFT_PROTOCOL_NAMED("MacInfo")
@protocol VSCFMacInfo <VSCFCContext>
/// Size of the digest (mac output) in bytes.
- (NSInteger)digestLen SWIFT_WARN_UNUSED_RESULT;
@end


/// Provides interface to the MAC (message authentication code) algorithms.
SWIFT_PROTOCOL_NAMED("MacStream")
@protocol VSCFMacStream <VSCFMacInfo>
/// Start a new MAC.
- (void)startWithKey:(NSData * _Nonnull)key;
/// Add given data to the MAC.
- (void)updateWithData:(NSData * _Nonnull)data;
/// Accomplish MAC and return it’s result (a message digest).
- (NSData * _Nonnull)finish SWIFT_WARN_UNUSED_RESULT;
/// Prepare to authenticate a new message with the same key
/// as the previous MAC operation.
- (void)reset;
@end


/// Provides interface to the stateless MAC (message authentication code) algorithms.
SWIFT_PROTOCOL_NAMED("Mac")
@protocol VSCFMac <VSCFMacInfo>
/// Calculate MAC over given data.
- (NSData * _Nonnull)macWithKey:(NSData * _Nonnull)key data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
@end


/// Virgil Security implementation of HMAC algorithm (RFC 2104) (FIPS PUB 198-1).
SWIFT_CLASS_NAMED("Hmac")
@interface VSCFHmac : NSObject <VSCFMac, VSCFMacStream>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setHashWithHash:(id <VSCFHashStream> _Nonnull)hash;
/// Size of the digest (mac output) in bytes.
- (NSInteger)digestLen SWIFT_WARN_UNUSED_RESULT;
/// Calculate MAC over given data.
- (NSData * _Nonnull)macWithKey:(NSData * _Nonnull)key data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Start a new MAC.
- (void)startWithKey:(NSData * _Nonnull)key;
/// Add given data to the MAC.
- (void)updateWithData:(NSData * _Nonnull)data;
/// Accomplish MAC and return it’s result (a message digest).
- (NSData * _Nonnull)finish SWIFT_WARN_UNUSED_RESULT;
/// Prepare to authenticate a new message with the same key
/// as the previous MAC operation.
- (void)reset;
@end


/// Provides interface to the key derivation function (KDF) algorithms.
SWIFT_PROTOCOL_NAMED("Kdf")
@protocol VSCFKdf <VSCFCContext>
/// Derive key of the requested length from the given data.
- (NSData * _Nonnull)deriveWithData:(NSData * _Nonnull)data keyLen:(NSInteger)keyLen SWIFT_WARN_UNUSED_RESULT;
@end


/// Virgil Security implementation of the KDF1 (ISO-18033-2) algorithm.
SWIFT_CLASS_NAMED("Kdf1")
@interface VSCFKdf1 : NSObject <VSCFKdf>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setHashWithHash:(id <VSCFHashStream> _Nonnull)hash;
/// Derive key of the requested length from the given data.
- (NSData * _Nonnull)deriveWithData:(NSData * _Nonnull)data keyLen:(NSInteger)keyLen SWIFT_WARN_UNUSED_RESULT;
@end


/// Virgil Security implementation of the KDF2 (ISO-18033-2) algorithm.
SWIFT_CLASS_NAMED("Kdf2")
@interface VSCFKdf2 : NSObject <VSCFKdf>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setHashWithHash:(id <VSCFHashStream> _Nonnull)hash;
/// Derive key of the requested length from the given data.
- (NSData * _Nonnull)deriveWithData:(NSData * _Nonnull)data keyLen:(NSInteger)keyLen SWIFT_WARN_UNUSED_RESULT;
@end


/// Defines enumeration of possible asymmetric key algorithms.
typedef SWIFT_ENUM_NAMED(NSInteger, VSCFKeyAlg, "KeyAlg", closed) {
  VSCFKeyAlgNone = 0,
  VSCFKeyAlgRsa = 1,
  VSCFKeyAlgEd25519 = 2,
};

@class VSCFRawKey;

/// Public and private key deserialization from an interchangeable format.
SWIFT_PROTOCOL_NAMED("KeyDeserializer")
@protocol VSCFKeyDeserializer <VSCFCContext>
/// Deserialize given public key as an interchangeable format to the object.
- (VSCFRawKey * _Nonnull)deserializePublicKeyWithPublicKeyData:(NSData * _Nonnull)publicKeyData error:(VSCFErrorCtx * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
/// Deserialize given private key as an interchangeable format to the object.
- (VSCFRawKey * _Nonnull)deserializePrivateKeyWithPrivateKeyData:(NSData * _Nonnull)privateKeyData error:(VSCFErrorCtx * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Public and private key serialization to an interchangeable format.
SWIFT_PROTOCOL_NAMED("KeySerializer")
@protocol VSCFKeySerializer <VSCFCContext>
/// Calculate buffer size enough to hold serialized public key.
/// Precondition: public key must be exportable.
- (NSInteger)serializedPublicKeyLenWithPublicKey:(id <VSCFPublicKey> _Nonnull)publicKey SWIFT_WARN_UNUSED_RESULT;
/// Serialize given public key to an interchangeable format.
/// Precondition: public key must be exportable.
- (NSData * _Nullable)serializePublicKeyWithPublicKey:(id <VSCFPublicKey> _Nonnull)publicKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Calculate buffer size enough to hold serialized private key.
/// Precondition: private key must be exportable.
- (NSInteger)serializedPrivateKeyLenWithPrivateKey:(id <VSCFPrivateKey> _Nonnull)privateKey SWIFT_WARN_UNUSED_RESULT;
/// Serialize given private key to an interchangeable format.
/// Precondition: private key must be exportable.
- (NSData * _Nullable)serializePrivateKeyWithPrivateKey:(id <VSCFPrivateKey> _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end





/// Provide conversion logic between OID and algorithm tags.
SWIFT_CLASS_NAMED("Oid")
@interface VSCFOid : NSObject
/// Return OID for given key algorithm.
+ (NSData * _Nonnull)fromKeyAlgWithKeyAlg:(enum VSCFKeyAlg)keyAlg SWIFT_WARN_UNUSED_RESULT;
/// Return key algorithm for given OID.
+ (enum VSCFKeyAlg)toKeyAlgWithOid:(NSData * _Nonnull)oid SWIFT_WARN_UNUSED_RESULT;
/// Return true if given OIDs are equal.
+ (BOOL)equalWithLhs:(NSData * _Nonnull)lhs rhs:(NSData * _Nonnull)rhs SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Simple PEM wrapper.
SWIFT_CLASS_NAMED("Pem")
@interface VSCFPem : NSObject
/// Return length in bytes required to hold wrapped PEM format.
+ (NSInteger)wrappedLenWithTitle:(NSString * _Nonnull)title dataLen:(NSInteger)dataLen SWIFT_WARN_UNUSED_RESULT;
/// Takes binary data and wraps it to the simple PEM format - no
/// additional information just header-base64-footer.
/// Note, written buffer is NOT null-terminated.
+ (NSData * _Nonnull)wrapWithTitle:(NSString * _Nonnull)title data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Return length in bytes required to hold unwrapped binary.
+ (NSInteger)unwrappedLenWithPemLen:(NSInteger)pemLen SWIFT_WARN_UNUSED_RESULT;
/// Takes PEM data and extract binary data from it.
+ (NSData * _Nullable)unwrapWithPem:(NSData * _Nonnull)pem error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns PEM title if PEM data is valid, otherwise - empty data.
+ (NSData * _Nonnull)titleWithPem:(NSData * _Nonnull)pem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Implements PKCS#8 key deserialization from DER format.
SWIFT_CLASS_NAMED("Pkcs8DerDeserializer")
@interface VSCFPkcs8DerDeserializer : NSObject <VSCFDefaults, VSCFKeyDeserializer>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setAsn1ReaderWithAsn1Reader:(id <VSCFAsn1Reader> _Nonnull)asn1Reader;
/// Setup predefined values to the uninitialized class dependencies.
- (BOOL)setupDefaultsAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Deserialize given public key as an interchangeable format to the object.
- (VSCFRawKey * _Nonnull)deserializePublicKeyWithPublicKeyData:(NSData * _Nonnull)publicKeyData error:(VSCFErrorCtx * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
/// Deserialize given private key as an interchangeable format to the object.
- (VSCFRawKey * _Nonnull)deserializePrivateKeyWithPrivateKeyData:(NSData * _Nonnull)privateKeyData error:(VSCFErrorCtx * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Implements PKCS#8 key serialization to DER format.
SWIFT_CLASS_NAMED("Pkcs8DerSerializer")
@interface VSCFPkcs8DerSerializer : NSObject <VSCFDefaults, VSCFKeySerializer>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setAsn1WriterWithAsn1Writer:(id <VSCFAsn1Writer> _Nonnull)asn1Writer;
/// Setup predefined values to the uninitialized class dependencies.
- (BOOL)setupDefaultsAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Calculate buffer size enough to hold serialized public key.
/// Precondition: public key must be exportable.
- (NSInteger)serializedPublicKeyLenWithPublicKey:(id <VSCFPublicKey> _Nonnull)publicKey SWIFT_WARN_UNUSED_RESULT;
/// Serialize given public key to an interchangeable format.
/// Precondition: public key must be exportable.
- (NSData * _Nullable)serializePublicKeyWithPublicKey:(id <VSCFPublicKey> _Nonnull)publicKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Calculate buffer size enough to hold serialized private key.
/// Precondition: private key must be exportable.
- (NSInteger)serializedPrivateKeyLenWithPrivateKey:(id <VSCFPrivateKey> _Nonnull)privateKey SWIFT_WARN_UNUSED_RESULT;
/// Serialize given private key to an interchangeable format.
/// Precondition: private key must be exportable.
- (NSData * _Nullable)serializePrivateKeyWithPrivateKey:(id <VSCFPrivateKey> _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Implements PKCS#8 key deserialization from PEM format.
SWIFT_CLASS_NAMED("Pkcs8Deserializer")
@interface VSCFPkcs8Deserializer : NSObject <VSCFDefaults, VSCFKeyDeserializer>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setAsn1ReaderWithAsn1Reader:(id <VSCFAsn1Reader> _Nonnull)asn1Reader;
- (void)setDerDeserializerWithDerDeserializer:(id <VSCFKeyDeserializer> _Nonnull)derDeserializer;
/// Setup predefined values to the uninitialized class dependencies.
- (BOOL)setupDefaultsAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Deserialize given public key as an interchangeable format to the object.
- (VSCFRawKey * _Nonnull)deserializePublicKeyWithPublicKeyData:(NSData * _Nonnull)publicKeyData error:(VSCFErrorCtx * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
/// Deserialize given private key as an interchangeable format to the object.
- (VSCFRawKey * _Nonnull)deserializePrivateKeyWithPrivateKeyData:(NSData * _Nonnull)privateKeyData error:(VSCFErrorCtx * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Implements PKCS#8 key serialization to PEM format.
SWIFT_CLASS_NAMED("Pkcs8Serializer")
@interface VSCFPkcs8Serializer : NSObject <VSCFDefaults, VSCFKeySerializer>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setAsn1WriterWithAsn1Writer:(id <VSCFAsn1Writer> _Nonnull)asn1Writer;
- (void)setDerSerializerWithDerSerializer:(id <VSCFKeySerializer> _Nonnull)derSerializer;
/// Setup predefined values to the uninitialized class dependencies.
- (BOOL)setupDefaultsAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Calculate buffer size enough to hold serialized public key.
/// Precondition: public key must be exportable.
- (NSInteger)serializedPublicKeyLenWithPublicKey:(id <VSCFPublicKey> _Nonnull)publicKey SWIFT_WARN_UNUSED_RESULT;
/// Serialize given public key to an interchangeable format.
/// Precondition: public key must be exportable.
- (NSData * _Nullable)serializePublicKeyWithPublicKey:(id <VSCFPublicKey> _Nonnull)publicKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Calculate buffer size enough to hold serialized private key.
/// Precondition: private key must be exportable.
- (NSInteger)serializedPrivateKeyLenWithPrivateKey:(id <VSCFPrivateKey> _Nonnull)privateKey SWIFT_WARN_UNUSED_RESULT;
/// Serialize given private key to an interchangeable format.
/// Precondition: private key must be exportable.
- (NSData * _Nullable)serializePrivateKeyWithPrivateKey:(id <VSCFPrivateKey> _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end





/// Provide implementation agnostic representation of the asymmetric key.
SWIFT_CLASS_NAMED("RawKey")
@interface VSCFRawKey : NSObject
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns asymmetric algorithm type that raw key belongs to.
- (enum VSCFKeyAlg)alg SWIFT_WARN_UNUSED_RESULT;
/// Return raw key data.
- (NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("RsaPrivateKey")
@interface VSCFRsaPrivateKey : NSObject <VSCFDecrypt, VSCFGenerateKey, VSCFPrivateKey, VSCFSign>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Define whether a private key can be imported or not.
@property (nonatomic, readonly) BOOL canImportPrivateKey;
/// Define whether a private key can be exported or not.
@property (nonatomic, readonly) BOOL canExportPrivateKey;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setHashWithHash:(id <VSCFHash> _Nonnull)hash;
- (void)setRandomWithRandom:(id <VSCFRandom> _Nonnull)random;
- (void)setAsn1rdWithAsn1rd:(id <VSCFAsn1Reader> _Nonnull)asn1rd;
- (void)setAsn1wrWithAsn1wr:(id <VSCFAsn1Writer> _Nonnull)asn1wr;
/// Setup parameters that is used during key generation.
- (void)setKeygenParamsWithBitlen:(NSInteger)bitlen exponent:(NSInteger)exponent;
/// Return implemented asymmetric key algorithm type.
- (enum VSCFKeyAlg)alg SWIFT_WARN_UNUSED_RESULT;
/// Length of the key in bytes.
- (NSInteger)keyLen SWIFT_WARN_UNUSED_RESULT;
/// Length of the key in bits.
- (NSInteger)keyBitlen SWIFT_WARN_UNUSED_RESULT;
/// Generate new private or secret key.
/// Note, this operation can be slow.
- (BOOL)generateKeyAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Decrypt given data.
- (NSData * _Nullable)decryptWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Calculate required buffer length to hold the decrypted data.
- (NSInteger)decryptedLenWithDataLen:(NSInteger)dataLen SWIFT_WARN_UNUSED_RESULT;
/// Sign data given private key.
- (NSData * _Nullable)signWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return length in bytes required to hold signature.
- (NSInteger)signatureLen SWIFT_WARN_UNUSED_RESULT;
/// Extract public part of the key.
- (id <VSCFPublicKey> _Nonnull)extractPublicKey SWIFT_WARN_UNUSED_RESULT;
/// Export private key in the binary format.
/// Binary format must be defined in the key specification.
/// For instance, RSA private key must be exported in format defined in
/// RFC 3447 Appendix A.1.2.
- (NSData * _Nullable)exportPrivateKeyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return length in bytes required to hold exported private key.
- (NSInteger)exportedPrivateKeyLen SWIFT_WARN_UNUSED_RESULT;
/// Import private key from the binary format.
/// Binary format must be defined in the key specification.
/// For instance, RSA private key must be imported from the format defined in
/// RFC 3447 Appendix A.1.2.
- (BOOL)importPrivateKeyWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
@end


SWIFT_CLASS_NAMED("RsaPublicKey")
@interface VSCFRsaPublicKey : NSObject <VSCFEncrypt, VSCFPublicKey, VSCFVerify>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Defines whether a public key can be imported or not.
@property (nonatomic, readonly) BOOL canImportPublicKey;
/// Define whether a public key can be exported or not.
@property (nonatomic, readonly) BOOL canExportPublicKey;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setHashWithHash:(id <VSCFHash> _Nonnull)hash;
- (void)setRandomWithRandom:(id <VSCFRandom> _Nonnull)random;
- (void)setAsn1rdWithAsn1rd:(id <VSCFAsn1Reader> _Nonnull)asn1rd;
- (void)setAsn1wrWithAsn1wr:(id <VSCFAsn1Writer> _Nonnull)asn1wr;
/// Return implemented asymmetric key algorithm type.
- (enum VSCFKeyAlg)alg SWIFT_WARN_UNUSED_RESULT;
/// Length of the key in bytes.
- (NSInteger)keyLen SWIFT_WARN_UNUSED_RESULT;
/// Length of the key in bits.
- (NSInteger)keyBitlen SWIFT_WARN_UNUSED_RESULT;
/// Encrypt given data.
- (NSData * _Nullable)encryptWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Calculate required buffer length to hold the encrypted data.
- (NSInteger)encryptedLenWithDataLen:(NSInteger)dataLen SWIFT_WARN_UNUSED_RESULT;
/// Verify data with given public key and signature.
- (BOOL)verifyWithData:(NSData * _Nonnull)data signature:(NSData * _Nonnull)signature SWIFT_WARN_UNUSED_RESULT;
/// Export public key in the binary format.
/// Binary format must be defined in the key specification.
/// For instance, RSA public key must be exported in format defined in
/// RFC 3447 Appendix A.1.1.
- (NSData * _Nullable)exportPublicKeyAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return length in bytes required to hold exported public key.
- (NSInteger)exportedPublicKeyLen SWIFT_WARN_UNUSED_RESULT;
/// Import public key from the binary format.
/// Binary format must be defined in the key specification.
/// For instance, RSA public key must be imported from the format defined in
/// RFC 3447 Appendix A.1.1.
- (BOOL)importPublicKeyWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
@end



/// This is MbedTLS implementation of SHA224.
SWIFT_CLASS_NAMED("Sha224")
@interface VSCFSha224 : NSObject <VSCFHash, VSCFHashStream>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Length of the digest (hashing output) in bytes.
@property (nonatomic, readonly) NSInteger digestLen;
/// Block length of the digest function in bytes.
@property (nonatomic, readonly) NSInteger blockLen;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Return implemented hash algorithm type.
- (enum VSCFHashAlg)alg SWIFT_WARN_UNUSED_RESULT;
/// Calculate hash over given data.
- (NSData * _Nonnull)hashWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Start a new hashing.
- (void)start;
/// Add given data to the hash.
- (void)updateWithData:(NSData * _Nonnull)data;
/// Accompilsh hashing and return it’s result (a message digest).
- (NSData * _Nonnull)finish SWIFT_WARN_UNUSED_RESULT;
@end


/// This is MbedTLS implementation of SHA256.
SWIFT_CLASS_NAMED("Sha256")
@interface VSCFSha256 : NSObject <VSCFHash, VSCFHashStream>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Length of the digest (hashing output) in bytes.
@property (nonatomic, readonly) NSInteger digestLen;
/// Block length of the digest function in bytes.
@property (nonatomic, readonly) NSInteger blockLen;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Return implemented hash algorithm type.
- (enum VSCFHashAlg)alg SWIFT_WARN_UNUSED_RESULT;
/// Calculate hash over given data.
- (NSData * _Nonnull)hashWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Start a new hashing.
- (void)start;
/// Add given data to the hash.
- (void)updateWithData:(NSData * _Nonnull)data;
/// Accompilsh hashing and return it’s result (a message digest).
- (NSData * _Nonnull)finish SWIFT_WARN_UNUSED_RESULT;
@end


/// This is MbedTLS implementation of SHA384.
SWIFT_CLASS_NAMED("Sha384")
@interface VSCFSha384 : NSObject <VSCFHash, VSCFHashStream>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Length of the digest (hashing output) in bytes.
@property (nonatomic, readonly) NSInteger digestLen;
/// Block length of the digest function in bytes.
@property (nonatomic, readonly) NSInteger blockLen;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Return implemented hash algorithm type.
- (enum VSCFHashAlg)alg SWIFT_WARN_UNUSED_RESULT;
/// Calculate hash over given data.
- (NSData * _Nonnull)hashWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Start a new hashing.
- (void)start;
/// Add given data to the hash.
- (void)updateWithData:(NSData * _Nonnull)data;
/// Accompilsh hashing and return it’s result (a message digest).
- (NSData * _Nonnull)finish SWIFT_WARN_UNUSED_RESULT;
@end


/// This is MbedTLS implementation of SHA512.
SWIFT_CLASS_NAMED("Sha512")
@interface VSCFSha512 : NSObject <VSCFHash, VSCFHashStream>
/// Handle underlying C context.
@property (nonatomic, readonly) void * _Nonnull c_ctx;
/// Length of the digest (hashing output) in bytes.
@property (nonatomic, readonly) NSInteger digestLen;
/// Block length of the digest function in bytes.
@property (nonatomic, readonly) NSInteger blockLen;
/// Create underlying C context.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Return implemented hash algorithm type.
- (enum VSCFHashAlg)alg SWIFT_WARN_UNUSED_RESULT;
/// Calculate hash over given data.
- (NSData * _Nonnull)hashWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Start a new hashing.
- (void)start;
/// Add given data to the hash.
- (void)updateWithData:(NSData * _Nonnull)data;
/// Accompilsh hashing and return it’s result (a message digest).
- (NSData * _Nonnull)finish SWIFT_WARN_UNUSED_RESULT;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
